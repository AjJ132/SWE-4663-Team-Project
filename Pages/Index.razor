@page "/"
@inherits IndexBase
@namespace TeamProject.Pages
@inject DialogService DialogService
@using TeamProject.Data

<PageTitle>Home</PageTitle>

@if (!this.IsLoaded)
{
    <p><em>Loading</em></p>
}
else
{
    @if (this.ErrorOccured)
    {
        <p>There was an error in loading the database</p>
        <p>Please press retry.</p>
        <RadzenButton Text="Retry" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large"></RadzenButton>
    }
    else
    {
        <RadzenStack>
            <RadzenStack>
                <RadzenStack AlignItems="AlignItems.Start" Gap="5px;">
                    <h1 style="margin-block-end: 0;">Project Tracking</h1>
                    <h4 style="margin-block-end: 0; ">@DateTime.Today.Date.ToString("ddd MMM yyyy")</h4>
                    <RadzenButton Text="New Project" Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Primary"  Click="@(() => CreateNewProject())"/>
                </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal">

            </RadzenStack>
            <div class="divider" />
        </RadzenStack>
    
    <RadzenStack >
        @foreach (var proj in this.Projects)
                {
                    <RadzenCard Style="border-radius: 25px;  " class="rz-card-custom">
                        <RadzenStack>
                            <h3>@proj.Name</h3>
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="2rem">
                                <h5>Total Requirements: @proj.TotalRequirements</h5>
                                <h5>Percent Complete: @proj.ProjectCompletion%</h5>
                                <h5>High Priority Tasks: @proj.HighPriorityTasks </h5>
                            </RadzenStack>
                            <RadzenStack Gap="0">
                                <p>Description</p>
                                <div class="divider" style="margin-top: 0;" />

                                <RadzenTextArea @bind-Value="@proj.Description"
                                    Change="(() => UpdateDescription(proj.Description, proj.Id))" style="max-width: 500px;" />

                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Horizontal">
                                <RadzenStack Gap="0" style="width: 80%;">
                                    <p>Members</p>
                                    <div class="divider" style="margin-top: 0;" />
                                    <RadzenButton Text="Add Member" ButtonStyle="ButtonStyle.Success" Click="@(() => this.CreateNewTeamMember(proj.Id))" Size="ButtonSize.Large" style="max-width: 175px; margin-bottom: 25px;" />

                                    <RadzenDataGrid TItem="ProjectTeamMember" Data="@proj.TeamMembers" AllowPaging="true"
                                        style="max-width: 600px;" AllowSorting="true" PageSize="5">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="ProjectTeamMember" Property="TeamMemberID" Title="ID"
                                                Width="50px" />
                                            <RadzenDataGridColumn TItem="ProjectTeamMember" Property="PermissionLevelName"
                                                Title="Role" />
                                            <RadzenDataGridColumn TItem="ProjectTeamMember" Property="TeamMemberName" Title="Name" />
                                            <RadzenDataGridColumn TItem="ProjectTeamMember" Title="Total Hours Worked">
                                                <Template Context="teamMember">
                                                    <p>@GetTotalManHours(teamMember.TeamMemberID, proj.Id)</p>
                                                </Template>
                                            </RadzenDataGridColumn>

                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenStack>

                                 <RadzenStack Gap="0" style="width: 100%;">
                                    <p>Project Phases Total Hours</p>
                                    <div class="divider" style="margin-top: 0;" />

                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="3rem" Style="width: 100%; ">
                                        
                                      
                                            <RadzenStack Gap="0">
                                               <RadzenStack Gap="0">
                                                    <p>Requirements Analysis</p>
                                                    <RadzenStack Orientation="Orientation.Horizontal">
                                                        <RadzenNumeric Min="0" Max="1000" @bind-Value="proj.ProjectPhaseHours.ReqAnaHrs" Style="width:100px;" />
                                                       
                                                    </RadzenStack>
                                                </RadzenStack>

                                                <RadzenStack Gap="0">
                                                    <p>Designing</p>
                                                    <RadzenNumeric Min="0" Max="1000" @bind-Value="proj.ProjectPhaseHours.DesignHrs" Style="width:100px" />
                                                </RadzenStack>
                                                <RadzenStack Gap="0">
                                                    <p>Coding</p>
                                                    <RadzenNumeric Min="0" Max="1000" @bind-Value="proj.ProjectPhaseHours.CodingHrs" Style="width:100px" />
                                                </RadzenStack>
                                            </RadzenStack>
                                            <RadzenStack Gap="0">
                                                <RadzenStack Gap="0">
                                                    <p>Testing</p>
                                                    <RadzenNumeric Min="0" Max="1000" @bind-Value="proj.ProjectPhaseHours.TestingHrs" Style="width:100px" />
                                                </RadzenStack>
                                                <RadzenStack Gap="0">
                                                    <p>Project Management</p>
                                                    <RadzenNumeric Min="0" Max="1000" @bind-Value="proj.ProjectPhaseHours.ProjManaHrs" Style="width:100px" />
                                                </RadzenStack>
                                                <RadzenStack Gap="0">
                                                    <p>Save</p>
                                                   <RadzenButton ButtonStyle="ButtonStyle.Success" Text="Save" Click="@(() => UpdateProjectPhaseHours(proj.Id))" />
                                                </RadzenStack>
                                            </RadzenStack>

                                              
                                   
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenStack>

                            <RadzenStack Gap="0">
                                <p>Risks</p>
                                <div class="divider" style="margin-top: 0;" />
                                <RadzenButton Text="Add Risk" ButtonStyle="ButtonStyle.Success" Click="@(() => this.UpdateOrAddRisk(proj.Id, -1))" Size="ButtonSize.Large" style="max-width: 150px;"/>

                                <RadzenDataGrid style="margin-top: 25px;" @ref="this.RisksGrid" TItem="Risk" Data="@proj.Risks" AllowPaging="true" AllowSorting="true" PageSize="5" EditMode="DataGridEditMode.Single" RowUpdate="@RiskRowUpdate">
                                    <Columns>
                                        @* <RadzenDataGridColumn TItem="Risk" Context="risk" Title="Edit/Delete" Filterable="false" Sortable="false"  Width="125px">
                                            <Template Context="risk">
                                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => RiskEditRow(risk))">
                                                </RadzenButton>
                                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => RiskDeleteRow(risk))" >
                                                </RadzenButton>
                                            </Template>
                                            <EditTemplate Context="risk">
                                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => RiskSaveRow(risk))">
                                                </RadzenButton>
                                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => RiskCancelEdit(risk))">
                                                </RadzenButton>
                                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => RiskDeleteRow(risk))">
                                                </RadzenButton>
                                            </EditTemplate>
                                        </RadzenDataGridColumn> *@
                                        <RadzenDataGridColumn TItem="Risk" Title="Update" Width="100px">
                                            <Template Context="r">
                                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => UpdateOrAddRisk(proj.Id, r.RiskID))"/>
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Risk" Property="RiskID" Title="ID" Width="75px" />
                                        <RadzenDataGridColumn TItem="Risk" Property="RiskName" Title="Risk" Width="200px" />
                                        <RadzenDataGridColumn TItem="Risk" Property="RiskSeverity" Title="Severity" Width="90px" />
                                        <RadzenDataGridColumn TItem="Risk" Property="RiskDescription" Title="Description" />
                                        <RadzenDataGridColumn TItem="Risk" Title="Status" Width="100px">
                                            <Template Context="risk">
                                                @if (risk.RiskStatus == true)
                                                {
                                                    <p style="color: green;">Mitigated</p>
                                                }
                                                else
                                                {
                                                    <p style="color: red;">Open</p>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Risk" Property="RiskMitigation" Title="Mitigation Stratgey" />

                                    </Columns>
                                </RadzenDataGrid>

                            </RadzenStack>

                        <RadzenStack Gap="0">
                                <p>Requirements</p>
                                <div class="divider" style="margin-top: 0;" />
                                <RadzenButton Text="Add Requirement" ButtonStyle="ButtonStyle.Success" Click="@(() => this.CreateNewRequirement(proj.Id))" Size="ButtonSize.Large" style="max-width: 225px;"/>
                            <div style="margin-top: 1rem;">
                                <table>
                                    <thead>
                                        <tr>
                                            <th style="text-align: center;">Task</th>
                                            <th style="text-align: center;">Status</th>
                                            @foreach (var date in proj.ProjectDates)
                                            {
                                                <th>&nbsp;&nbsp;@date.ToShortDateString() &nbsp;&nbsp;</th>

                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var task in proj.Tasks)
                                        {
                                            <tr>
                                                <td class="table-cell">@task.TaskName</td>
                                                <td class="table-cell" @onclick="(() =>  UpdateRequrementStatus(proj.Id, task.ReqID))">@task.Status</td>
                                                @foreach (var date in task.Dates)
                                                {
                                                    @if (date.Value == true)
                                                    {
                                                        <th class="highlighted" @onclick="((async) => ToggleTaskDate(task, date.Key, proj.Id))">
                                                            @this.Projects.FirstOrDefault(p => p.Id ==
                                                                     proj.Id)?.TeamMembers.FirstOrDefault(t => t.TeamMemberID ==
                                                                     task.UserID)?.TeamMemberName </th>
                                                    }
                                                    else
                                                    {
                                                        <th @onclick="(() => ToggleTaskDate(task, date.Key, proj.Id))"></th>
                                                    }
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                }
            </RadzenStack>
        </RadzenStack>
    }
}


<style>
    h1 {
        margin-block-end: 0;
        margin-block-start: 0;
        font-weight: 600;
    }



    .divider {
        border-bottom: 3px solid #e0e0e0;
        margin: 10px 0;
    }

    .highlighted {
        background-color: rgb(1, 206, 1) !important;
        text-align: center;
        /* Or any color you prefer */
    }

    .table-cell {
        padding: 10px;
        /* Adjust the value as needed */
    }

    table {
        border-collapse: separate;

        border-spacing: 1px;

    }

    /* Style for odd columns */
    tr>td:nth-child(odd),
    tr>th:nth-child(odd) {
        background-color: #f2f2f2;

        /* Light gray color, change as needed */
    }

    /* Style for even columns */
    tr>td:nth-child(even),
    tr>th:nth-child(even) {
        background-color: #e7e7e7;
        /* Slightly darker gray, change as needed */
    }

    .edit-btn {
        cursor: pointer;
        transform: all 0.5s ease-in-out;
    }

    .edit-btn:hover {
        scale: 1.2;
    }

    .rz-card-custom{
        box-shadow: 20 20 20 20 rgba(0, 0, 0, 0.5) !important;
    }
</style>